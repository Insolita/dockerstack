version: '2'
networks:
    appnet:
        driver: bridge
        ipam:
            config:
                - subnet: 172.20.0.0/24
services:
  elasticsearch:
      image: 'elasticsearch:5'
      volumes:
         - ./docker/db/elastic:/usr/share/elasticsearch/data
      environment:
          TZ: ${DB_TIMEZONE}
      expose:
         - '9200'
         - '9300'
      ports:
         - '9200:9200'
         - '9300:9300'
      networks:
          appnet:
              ipv4_address: 172.20.0.2
  redis:
      restart: on-failure
      image: redis
      command: redis-server --requirepass redispassword
      ports:
         - '63791:6379'
      environment:
         TZ: ${DB_TIMEZONE}
      networks:
          appnet:
              ipv4_address: 172.20.0.3
  web:
      image: nginx:1.14-alpine
      volumes:
         - ./docker/nginx/vhost.conf:/etc/nginx/conf.d/default.conf
         - ./docker/nginx/ssl/:/etc/nginx/ssl/
         - .:/app
      expose:
         - 80
      ports:
         - 8008:80
      restart: on-failure
      links:
         - php
         - elasticsearch
      depends_on:
         - php
      networks:
          appnet:
              ipv4_address: 172.20.0.4
  php:
      build: docker/fpm
      restart: on-failure
      links:
        - db
        - redis
      volumes:
        - .:/app
      environment:
        - TZ=${DB_TIMEZONE}
        - PHP_XDEBUG_ENABLED=1
        - XDEBUG_CONFIG=remote_host=host.docker.internal
      networks:
          appnet:
              ipv4_address: 172.20.0.5
  php-cli:
      build:
          context: docker/cli
          args:
              - USER=appuser
              - GROUP=appuser
              - GID=1000
              - UID=1000
              - ALLOW_SUDO=1
      restart: on-failure
      links:
          - db
          - testdb
          - redis
      volumes_from:
          - php
      environment:
          - TZ=${DB_TIMEZONE}
          - PHP_XDEBUG_ENABLED=1
          - XDEBUG_CONFIG=remote_host=host.docker.internal
      tty: true
      networks:
          appnet:
              ipv4_address: 172.20.0.6
  db:
      image: 'postgres:11.1'
      restart: on-failure
      expose:
        - 5432
      ports:
        - '12345:5432'
      environment:
        - TZ=${DB_TIMEZONE}
        - PGTZ=${DB_TIMEZONE}
        - POSTGRES_DB=${DB_DATABASE}
        - POSTGRES_USER=${DB_USERNAME}
        - POSTGRES_PASSWORD=${DB_PASSWORD}
      volumes:
        - ./docker/db/postgres:/var/lib/postgresql/data
      networks:
          appnet:
              ipv4_address: 172.20.0.7
  testdb:
      image: 'postgres:11.1'
      restart: on-failure
      expose:
        - 5432
      ports:
        - '12340:5432'
      environment:
        - TZ=${DB_TIMEZONE}
        - PGTZ=${DB_TIMEZONE}
        - POSTGRES_DB=${DB_TEST_DATABASE}
        - POSTGRES_USER=${DB_USERNAME}
        - POSTGRES_PASSWORD=${DB_PASSWORD}
      volumes:
        - ./docker/db/testdb:/var/lib/postgresql/data
      networks:
          appnet:
              ipv4_address: 172.20.0.8
  node:
      image: "node:8-alpine"
      user: "node"
      working_dir: /app
      environment:
        - NODE_ENV=development
      volumes:
        - .:/app
      expose:
        - "7777"
      tty: true
      networks:
          appnet:
              ipv4_address: 172.20.0.9
  mailcatcher:
      image: schickling/mailcatcher:latest
      ports:
          - "10080:1080"
      networks:
           appnet:
                ipv4_address: 172.20.0.10
